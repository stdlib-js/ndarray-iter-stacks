// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import r from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.2.1-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.2-esm/index.mjs";import{isPrimitive as s}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.2.2-esm/index.mjs";import{primitives as t}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-integer-array@v0.2.2-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-ndarray-like@v0.2.2-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-read-only@v0.2.2-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.2-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/symbol-iterator@v0.2.2-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-zeros@v0.2.2-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-copy@v0.2.2-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-take@v0.3.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-put@v0.0.2-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-shape@v0.2.2-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-normalize-index@v0.2.2-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-numel@v0.2.2-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-slice@v0.2.2-esm/index.mjs";import{assign as b}from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-next-cartesian-index@v0.2.2-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-base-args2multislice@v0.2.2-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@v0.2.2-esm/index.mjs";function c(y,w){var x,E,T,V,F,k,z,D,q,R,S,A,B,C,G,H;if(!n(y))throw new TypeError(g("null4f",y));if(!t(w))throw new TypeError(g("invalid argument. Second argument must be an array of integers. Value: `%s`.",w));if(k={writable:!1},arguments.length>2){if(!e(E=arguments[2]))throw new TypeError(g("null2V",E));if(d(E,"readonly")){if(!s(E.readonly))throw new TypeError(g("null2o","readonly",E.readonly));if(k.writable=!E.readonly,k.writable&&i(y))throw new Error(g("nullF4"))}}if(F=w,A=(w=a(w)).length,(V=(T=h(y)).length)<=A)throw new TypeError(g("invalid argument. First argument must be an ndarray having at least %d dimensions.",A+1));for(G=0;G<A;G++){if(-1===(C=p(w[G],V-1)))throw new RangeError(g("nullF8",V,w[G]));w[G]=C}for(0===(B=f(T))&&(q=!0),G=0;G<A-1;G++)if(w[G]>w[G+1])throw new Error(g("invalid argument. Dimension indices must be sorted in ascending order. Value: `%s`.",F));for(H=1,G=1;G<A;G++){if(w[G]===w[G-1])throw new Error(g("invalid argument. Dimension indices must be unique. Value: `%s`.",F));w[H]=w[G],H+=1}for(G=0;G<A;G++)B/=T[w[G]];for(R=m(V),G=0;G<A;G++)R[w[G]]=null;for(x=[],H=0,G=0;G<V;G++)G!==w[H]?x.push(G):H+=1;return S=l(T,x,"throw"),D=l(R,x,"throw"),G=-1,r(z={},"next",(function(){var r;if(G+=1,q||G>=B)return{done:!0};return r=u(R),D=b(S,"row-major",D,-1,D),R=j(R,x,D,"throw"),{value:v(y,r,!0,k.writable),done:!1}})),r(z,"return",(function(r){if(q=!0,arguments.length)return{value:r,done:!0};return{done:!0}})),o&&r(z,o,(function(){return c(y,w,k)})),z}export{c as default};
//# sourceMappingURL=index.mjs.map
