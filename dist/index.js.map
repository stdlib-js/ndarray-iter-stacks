{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar copy = require( '@stdlib/array-base-copy' );\nvar take = require( '@stdlib/array-base-take' );\nvar put = require( '@stdlib/array-base-put' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar nextCartesianIndex = require( '@stdlib/ndarray-base-next-cartesian-index' ).assign;\nvar args2multislice = require( '@stdlib/slice-base-args2multislice' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each subarray in a stack of subarrays according to a list of specified stack dimensions.\n*\n* @param {ndarray} x - input value\n* @param {IntegerArray} dims - indices of dimensions to stack\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least `dims.length+1` dimensions\n* @throws {TypeError} second argument must be an array of integers\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {Error} dimension indices must be sorted in ascending order\n* @throws {Error} dimension indices must be unique\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerStacks( x, [ 1, 2 ] );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerStacks( x, dims ) {\n\tvar indices;\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar odims;\n\tvar opts;\n\tvar iter;\n\tvar ibuf;\n\tvar FLG;\n\tvar idx;\n\tvar sh;\n\tvar M;\n\tvar N;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isIntegerArray( dims ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of integers. Value: `%s`.', dims ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 2 ) {\n\t\toptions = arguments[ 2 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\todims = dims; // cache a reference to the original input array\n\tdims = copy( dims );\n\tM = dims.length;\n\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims <= M ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having at least %d dimensions.', M+1 ) );\n\t}\n\t// Normalize dimension indices...\n\tfor ( i = 0; i < M; i++ ) {\n\t\td = normalizeIndex( dims[ i ], ndims-1 );\n\t\tif ( d === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', ndims, dims[ i ] ) );\n\t\t}\n\t\tdims[ i ] = d;\n\t}\n\t// Check whether the input array is empty:\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Ensure the indices are sorted in ascending order:\n\tfor ( i = 0; i < M-1; i++ ) {\n\t\tif ( dims[ i ] > dims[ i+1 ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Dimension indices must be sorted in ascending order. Value: `%s`.', odims ) );\n\t\t}\n\t}\n\t// Ensure that indices are unique...\n\tj = 1;\n\tfor ( i = 1; i < M; i++ ) {\n\t\tif ( dims[ i ] === dims[ i-1 ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Dimension indices must be unique. Value: `%s`.', odims ) );\n\t\t}\n\t\tdims[ j ] = dims[ i ];\n\t\tj += 1;\n\t}\n\t// Compute the number of subarrays across all stacks of subarrays:\n\tfor ( i = 0; i < M; i++ ) {\n\t\tN /= shape[ dims[ i ] ];\n\t}\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the specified dimensions to `null` to indicate that we want a full \"slice\" for those dimensions:\n\tfor ( i = 0; i < M; i++ ) {\n\t\tidx[ dims[ i ] ] = null;\n\t}\n\t// Create an array of indices over which we want to iterate:\n\tindices = [];\n\tj = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( i === dims[ j ] ) {\n\t\t\tj += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tindices.push( i );\n\t}\n\t// Create an index buffer for generating Cartesian indices:\n\tsh = take( shape, indices, 'throw' );\n\tibuf = take( idx, indices, 'throw' );\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index buffer:\n\t\tibuf = nextCartesianIndex( sh, 'row-major', ibuf, -1, ibuf );\n\n\t\t// Update the index array:\n\t\tidx = put( idx, indices, ibuf, 'throw' );\n\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerStacks( x, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nditerStacks;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iterates over each subarray in a stack of subarrays according to a list of specified stack dimensions.\n*\n* @module @stdlib/ndarray-iter-stacks\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var nditerStacks = require( '@stdlib/ndarray-iter-stacks' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerStacks( x, [ 1, 2 ] );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isPlainObject", "isBoolean", "isIntegerArray", "isndarrayLike", "isReadOnly", "hasOwnProp", "iteratorSymbol", "zeros", "copy", "take", "put", "getShape", "normalizeIndex", "numel", "slice", "nextCartesianIndex", "args2multislice", "format", "nditerStacks", "x", "dims", "indices", "options", "shape", "ndims", "odims", "opts", "iter", "ibuf", "FLG", "idx", "sh", "M", "N", "d", "i", "j", "next", "end", "factory", "s", "value", "main"]
}
