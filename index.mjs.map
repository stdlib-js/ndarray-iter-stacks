{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport zeros from '@stdlib/array-base-zeros';\nimport copy from '@stdlib/array-base-copy';\nimport take from '@stdlib/array-base-take';\nimport put from '@stdlib/array-base-put';\nimport getShape from '@stdlib/ndarray-shape';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport numel from '@stdlib/ndarray-base-numel';\nimport slice from '@stdlib/ndarray-base-slice';\nimport { assign as nextCartesianIndex } from '@stdlib/ndarray-base-next-cartesian-index';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each subarray in a stack of subarrays according to a list of specified stack dimensions.\n*\n* @param {ndarray} x - input value\n* @param {IntegerArray} dims - indices of dimensions to stack\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least `dims.length+1` dimensions\n* @throws {TypeError} second argument must be an array of integers\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {Error} dimension indices must be sorted in ascending order\n* @throws {Error} dimension indices must be unique\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerStacks( x, [ 1, 2 ] );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerStacks( x, dims ) {\n\tvar indices;\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar odims;\n\tvar opts;\n\tvar iter;\n\tvar ibuf;\n\tvar FLG;\n\tvar idx;\n\tvar sh;\n\tvar M;\n\tvar N;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null4f', x ) );\n\t}\n\tif ( !isIntegerArray( dims ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of integers. Value: `%s`.', dims ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 2 ) {\n\t\toptions = arguments[ 2 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2o', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'nullF4' ) );\n\t\t\t}\n\t\t}\n\t}\n\todims = dims; // cache a reference to the original input array\n\tdims = copy( dims );\n\tM = dims.length;\n\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims <= M ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having at least %d dimensions.', M+1 ) );\n\t}\n\t// Normalize dimension indices...\n\tfor ( i = 0; i < M; i++ ) {\n\t\td = normalizeIndex( dims[ i ], ndims-1 );\n\t\tif ( d === -1 ) {\n\t\t\tthrow new RangeError( format( 'nullF8', ndims, dims[ i ] ) );\n\t\t}\n\t\tdims[ i ] = d;\n\t}\n\t// Check whether the input array is empty:\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Ensure the indices are sorted in ascending order:\n\tfor ( i = 0; i < M-1; i++ ) {\n\t\tif ( dims[ i ] > dims[ i+1 ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Dimension indices must be sorted in ascending order. Value: `%s`.', odims ) );\n\t\t}\n\t}\n\t// Ensure that indices are unique...\n\tj = 1;\n\tfor ( i = 1; i < M; i++ ) {\n\t\tif ( dims[ i ] === dims[ i-1 ] ) {\n\t\t\tthrow new Error( format( 'invalid argument. Dimension indices must be unique. Value: `%s`.', odims ) );\n\t\t}\n\t\tdims[ j ] = dims[ i ];\n\t\tj += 1;\n\t}\n\t// Compute the number of subarrays across all stacks of subarrays:\n\tfor ( i = 0; i < M; i++ ) {\n\t\tN /= shape[ dims[ i ] ];\n\t}\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the specified dimensions to `null` to indicate that we want a full \"slice\" for those dimensions:\n\tfor ( i = 0; i < M; i++ ) {\n\t\tidx[ dims[ i ] ] = null;\n\t}\n\t// Create an array of indices over which we want to iterate:\n\tindices = [];\n\tj = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( i === dims[ j ] ) {\n\t\t\tj += 1;\n\t\t\tcontinue;\n\t\t}\n\t\tindices.push( i );\n\t}\n\t// Create an index buffer for generating Cartesian indices:\n\tsh = take( shape, indices, 'throw' );\n\tibuf = take( idx, indices, 'throw' );\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index buffer:\n\t\tibuf = nextCartesianIndex( sh, 'row-major', ibuf, -1, ibuf );\n\n\t\t// Update the index array:\n\t\tidx = put( idx, indices, ibuf, 'throw' );\n\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerStacks( x, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerStacks;\n"],"names":["nditerStacks","x","dims","indices","options","shape","ndims","odims","opts","iter","ibuf","FLG","idx","sh","M","N","d","i","j","isndarrayLike","TypeError","format","isIntegerArray","writable","arguments","length","isPlainObject","hasOwnProp","isBoolean","readonly","isReadOnly","Error","copy","getShape","normalizeIndex","RangeError","numel","zeros","push","take","setReadOnly","s","done","args2multislice","nextCartesianIndex","put","value","slice","iteratorSymbol"],"mappings":";;y1DAsFA,SAASA,EAAcC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAelB,GACpB,MAAM,IAAImB,UAAWC,EAAQ,SAAUpB,IAExC,IAAMqB,EAAgBpB,GACrB,MAAM,IAAIkB,UAAWC,EAAQ,+EAAgFnB,IAK9G,GAHAM,EAAO,CACNe,UAAY,GAERC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNtB,EAAUoB,UAAW,IAEpB,MAAM,IAAIJ,UAAWC,EAAQ,SAAUjB,IAExC,GAAKuB,EAAYvB,EAAS,YAAe,CACxC,IAAMwB,EAAWxB,EAAQyB,UACxB,MAAM,IAAIT,UAAWC,EAAQ,SAAU,WAAYjB,EAAQyB,WAG5D,GADArB,EAAKe,UAAYnB,EAAQyB,SACpBrB,EAAKe,UAAYO,EAAY7B,GACjC,MAAM,IAAI8B,MAAOV,EAAQ,UAE1B,CACD,CAUD,GATAd,EAAQL,EAERY,GADAZ,EAAO8B,EAAM9B,IACJuB,QAITnB,GADAD,EAAQ4B,EAAUhC,IACJwB,SAGAX,EACb,MAAM,IAAIM,UAAWC,EAAQ,qFAAsFP,EAAE,IAGtH,IAAMG,EAAI,EAAGA,EAAIH,EAAGG,IAAM,CAEzB,IAAY,KADZD,EAAIkB,EAAgBhC,EAAMe,GAAKX,EAAM,IAEpC,MAAM,IAAI6B,WAAYd,EAAQ,SAAUf,EAAOJ,EAAMe,KAEtDf,EAAMe,GAAMD,CACZ,CAOD,IAJW,KADXD,EAAIqB,EAAO/B,MAEVM,GAAM,GAGDM,EAAI,EAAGA,EAAIH,EAAE,EAAGG,IACrB,GAAKf,EAAMe,GAAMf,EAAMe,EAAE,GACxB,MAAM,IAAIc,MAAOV,EAAQ,sFAAuFd,IAKlH,IADAW,EAAI,EACED,EAAI,EAAGA,EAAIH,EAAGG,IAAM,CACzB,GAAKf,EAAMe,KAAQf,EAAMe,EAAE,GAC1B,MAAM,IAAIc,MAAOV,EAAQ,mEAAoEd,IAE9FL,EAAMgB,GAAMhB,EAAMe,GAClBC,GAAK,CACL,CAED,IAAMD,EAAI,EAAGA,EAAIH,EAAGG,IACnBF,GAAKV,EAAOH,EAAMe,IAMnB,IAHAL,EAAMyB,EAAO/B,GAGPW,EAAI,EAAGA,EAAIH,EAAGG,IACnBL,EAAKV,EAAMe,IAAQ,KAKpB,IAFAd,EAAU,GACVe,EAAI,EACED,EAAI,EAAGA,EAAIX,EAAOW,IAClBA,IAAMf,EAAMgB,GAIjBf,EAAQmC,KAAMrB,GAHbC,GAAK,EAqBP,OAfAL,EAAK0B,EAAMlC,EAAOF,EAAS,SAC3BO,EAAO6B,EAAM3B,EAAKT,EAAS,SAG3Bc,GAAK,EAILuB,EADA/B,EAAO,CAAA,EACY,QAenB,WACC,IAAIgC,EAGJ,GADAxB,GAAK,EACAN,GAAOM,GAAKF,EAChB,MAAO,CACN2B,MAAQ,GAaV,OATAD,EAAIE,EAAiB/B,GAGrBF,EAAOkC,EAAoB/B,EAAI,YAAaH,GAAO,EAAGA,GAGtDE,EAAMiC,EAAKjC,EAAKT,EAASO,EAAM,SAGxB,CACNoC,MAASC,EAAO9C,EAAGwC,GAAG,EAAMjC,EAAKe,UACjCmB,MAAQ,EAET,IArCDF,EAAa/B,EAAM,UA8CnB,SAAcqC,GAEb,GADAnC,GAAM,EACDa,UAAUC,OACd,MAAO,CACNqB,MAASA,EACTJ,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IAtDIM,GACJR,EAAa/B,EAAMuC,GA6DpB,WACC,OAAOhD,EAAcC,EAAGC,EAAMM,EAC9B,IA7DMC,CA8DR"}